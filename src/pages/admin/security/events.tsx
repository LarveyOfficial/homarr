import { Avatar, Card, Container, Group, Stack, Text, Title } from '@mantine/core';
import { User } from '@prisma/client';
import {
  IconKey,
  IconLogin,
  IconLogout,
  IconMailForward,
  IconMailOff,
  IconQuestionMark,
  IconUserMinus,
  IconUserPlus,
  TablerIcon,
} from '@tabler/icons';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import dayjs from 'dayjs';
import 'dayjs/locale/de';
import calendar from 'dayjs/plugin/calendar';
import localizedFormat from 'dayjs/plugin/localizedFormat';
import { GetServerSidePropsContext, InferGetServerSidePropsType, NextPage } from 'next';
import { Trans, useTranslation } from 'next-i18next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { MainLayout } from '../../../components/layout/admin/main-layout';
import { AnySecurityEvent, SecurityEventType } from '../../../tools/events/types';
import { getServerSideTranslations } from '../../../tools/server/getServerSideTranslations';

dayjs.extend(calendar);
dayjs.extend(localizedFormat);

const events = [
  'login',
  'logout',
  'register',
  'invite',
  'invite-deleted',
  'permission-changed',
  'user-archived',
] as const;

const Events: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = () => {
  const { data: events } = useQuery<AnySecurityEvent[]>({
    queryKey: ['events'],
    queryFn: async () => {
      const events = await axios.get('/api/security/events').then((res) => res.data);
      return events;
    },
    select: (data) => data.map((event) => ({ ...event, timestamp: new Date(event.timestamp) })),
  });

  return (
    <MainLayout>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Stack>
          <div>
            <Title>Event-Log</Title>
            <Title order={4} weight={400}>
              View the events that have occurred.
            </Title>
          </div>

          <Stack spacing="xs">
            {events
              ?.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
              .map((event) => (
                <SecurityEventCard key={event.id} event={event} />
              ))}
          </Stack>
        </Stack>
      </Container>
    </MainLayout>
  );
};

export const getServerSideProps = async ({ req, res, locale }: GetServerSidePropsContext) => {
  const translations = await getServerSideTranslations(['common'], locale, req, res);
  return {
    props: {
      ...translations,
    },
  };
};

export default Events;

interface SecurityEventProps {
  event: AnySecurityEvent;
}

const generateCalendarLocales = (t: (key: string) => string) => ({
  sameDay: t('dayjs.sameDay'),
  nextDay: t('dayjs.nextDay'),
  nextWeek: t('dayjs.nextWeek'),
  lastDay: t('dayjs.lastDay'),
  lastWeek: t('dayjs.lastWeek'),
  sameElse: 'L LT',
});

const useCalendarTime = (timestamp: Date) => {
  const { t } = useTranslation();
  const { locale } = useRouter();

  return dayjs(timestamp)
    .locale(locale ?? 'en')
    .calendar(null, generateCalendarLocales(t));
};

const eventIcons: Record<SecurityEventType, TablerIcon> = {
  login: IconLogin,
  'login-failed': IconLogin,
  logout: IconLogout,
  register: IconUserPlus,
  invite: IconMailForward,
  'invite-deleted': IconMailOff,
  'permission-changed': IconKey,
  'user-archived': IconUserMinus,
};

const SecurityEventCard = ({ event }: SecurityEventProps) => {
  const { t } = useTranslation();
  const avatar = useAvatar(event.user);
  const calendarTime = useCalendarTime(event.timestamp);
  const Icon = eventIcons[event.type] ?? IconQuestionMark;

  return (
    <Card withBorder key={event.id}>
      <Group position="apart">
        <Group spacing="sm">
          <Icon size={16} />
          <Avatar radius="xl" {...avatar} />
          <Stack spacing={0}>
            <Text lineClamp={1}>
              <Trans
                i18nKey={`events.${event.type}.label`}
                values={{
                  user: event.user?.username ?? (event.data as any).fallbackUsername ?? 'unknown',
                  ...event.data,
                }}
                components={{
                  strong: <Text weight={500} span />,
                }}
              />
            </Text>
            <Text size="xs" color="dimmed">
              {calendarTime}
            </Text>
          </Stack>
        </Group>
      </Group>
    </Card>
  );
};

const useAvatar = (user: Pick<User, 'id' | 'username'> | null) => ({
  color: 'blue',
  children: user?.username?.toUpperCase().substring(0, 2) ?? '?',
  src: undefined,
});
