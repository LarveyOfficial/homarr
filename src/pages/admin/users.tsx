import { Badge, Button, Container, Group, Menu, Stack, TextInput, Title } from '@mantine/core';
import { useDebouncedValue } from '@mantine/hooks';
import { NextLink } from '@mantine/next';
import { IconChevronDown, IconMail, IconSearch } from '@tabler/icons';
import type { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { openInviteCreateModal } from '../../components/Admin/Invite/InviteCreateModal';
import { useInvitesQuery } from '../../components/Admin/Invite/InviteTable';
import { UserFilterType, UserTable } from '../../components/Admin/User/UserTable';
import { getServerAuthSession } from '../../server/common/get-server-auth-session';
import { getServerSideTranslations } from '../../tools/getServerSideTranslations';

const titleMap: Record<UserFilterType, string> = {
  all: 'All users',
  'user-enabled': 'Enabled users',
  'user-archived': 'Archived users',
  'user-non-admin': 'Non admin users',
  'user-admin': 'Admin users',
};

const Users: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = () => {
  const { data: invites } = useInvitesQuery();
  const [filter, setFilter] = useState<UserFilterType>('all');
  const [search, setSearch] = useState<string>('');
  const [debouncedSearch] = useDebouncedValue(search, 200);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Stack>
          <div>
            <Title>{titleMap[filter]}</Title>
            <Title order={4} weight={400}>
              Manage the users that can access your dashboards.
            </Title>
          </div>
          <Group position="apart" noWrap>
            <Group spacing={0} w="100%" noWrap>
              <Menu position="bottom-start">
                <Menu.Target>
                  <Button
                    variant="default"
                    style={{
                      borderTopRightRadius: 0,
                      borderBottomRightRadius: 0,
                      borderRight: 'none',
                    }}
                    rightIcon={<IconChevronDown size={16} />}
                  >
                    Filters
                  </Button>
                </Menu.Target>
                <Menu.Dropdown>
                  <Menu.Item onClick={() => setFilter('all')}>All users</Menu.Item>
                  <Menu.Item onClick={() => setFilter('user-enabled')}>Enabled users</Menu.Item>
                  <Menu.Item onClick={() => setFilter('user-archived')}>Archived users</Menu.Item>
                  <Menu.Item onClick={() => setFilter('user-non-admin')}>Non admin users</Menu.Item>
                  <Menu.Item onClick={() => setFilter('user-admin')}>Admin users</Menu.Item>
                </Menu.Dropdown>
              </Menu>
              <TextInput
                icon={<IconSearch size={16} />}
                styles={{
                  input: {
                    borderTopLeftRadius: 0,
                    borderBottomLeftRadius: 0,
                  },
                }}
                w="100%"
                placeholder="Search all users"
                value={search}
                onChange={(ev) => setSearch(ev.target.value)}
              />
            </Group>
            <Group noWrap>
              <Button
                component={NextLink}
                href="/admin/invites"
                variant="default"
                leftIcon={<IconMail size={16} />}
                rightIcon={<Badge>{invites?.length ?? 0}</Badge>}
              >
                Invites
              </Button>
              <Button onClick={openInviteCreateModal}>Invite user</Button>
            </Group>
          </Group>
          <UserTable search={debouncedSearch} filter={filter} />
        </Stack>
      </Container>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerAuthSession({
    req: context.req,
    res: context.res,
  });

  const currentUser = await prisma?.user.findFirst({
    where: {
      id: session?.user?.id,
    },
  });

  if (!currentUser?.isAdmin) {
    return {
      notFound: true,
    };
  }

  const translations = await getServerSideTranslations(
    context.req,
    context.res,
    ['common', 'form'],
    context.locale
  );

  return { props: { ...translations } };
};

export default Users;
